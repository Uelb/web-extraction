// Generated by CoffeeScript 1.7.1
(function() {
  var SSQL;

  SSQL = {};

  SSQL.CUSTOM_WEIGHTED_DISTANCE = function(vec1, vec2, weights) {
    var N, d, defaultWeight, i;
    d = 0;
    N = vec1.length;
    Utils.checkLengths(vec1, vec2);
    defaultWeight = 0;
    if (weights.length === 1) {
      defaultWeight = weights[0];
    }
    i = 0;
    while (i < N) {
      if (vec1[i] !== vec2[i]) {
        if (defaultWeight !== 0) {
          d += defaultWeight;
        } else {
          d += weights[i];
        }
      }
      i++;
    }
    return d;
  };

  SSQL.CUSTOM_DISTANCE = function(vec1, vec2) {
    return SSQL.CUSTOM_WEIGHTED_DISTANCE(vec1, vec2, [1]);
  };

  SSQL.processData = function(data, level) {
    var element, i, labels, result, root, vectors;
    labels = [];
    vectors = [];
    i = 0;
    while (i < data.length) {
      element = data[i];
      labels[i] = element.id;
      vectors[i] = SSQL.getVector(element);
      i++;
    }
    root = figue.agglomerate(labels, vectors, SSQL.CUSTOM_DISTANCE, figue.COMPLETE_LINKAGE);
    result = [];
    SSQL.clusterize(root, level, result);
    return result;
  };

  SSQL.clusterize = function(root, level, result) {
    if (root.dist <= level && !root.isLeaf()) {
      result.push(root);
    } else if (!root.isLeaf()) {
      SSQL.clusterize(root.left, level, result);
      SSQL.clusterize(root.right, level, result);
    }
  };

  SSQL.getVector = function(element) {
    var bgColor, color, fontStyle, height, leftAlignment, textDecoration, topAlignement, width, zIndex;
    color = Utils.processColorString(element.color);
    bgColor = Utils.processColorString(element.bgColor);
    width = element.width;
    height = element.height;
    textDecoration = element.textDecoration;
    if (element.textDecoration === "none") {
      textDecoration = 0;
    } else if (element.textDecoration === "underline") {
      textDecoration = 1;
    } else if (element.textDecoration === "overline") {
      textDecoration = 2;
    } else if (element.textDecoration === "line-through") {
      textDecoration = 3;
    } else {
      textDecoration = 4;
    }
    fontStyle = element.fontStyle;
    if (element.fontStyle === "normal") {
      fontStyle = 0;
    } else if (element.fontStyle === "italic") {
      fontStyle = 1;
    } else if (element.fontStyle === "oblique") {
      fontStyle = 2;
    } else {
      fontStyle = 3;
    }
    leftAlignment = element.position.left;
    topAlignement = element.position.top;
    zIndex = element.zIndex;
    if (element.zIndex === "auto") {
      zIndex = 0;
    } else {
      zIndex = parseFloat(element.zIndex);
    }
    return [color, bgColor, width, height, textDecoration, fontStyle, leftAlignment, topAlignement, zIndex];
  };

  window.SSQL = SSQL;

}).call(this);
